import os,sys # Importation of os and sys modules
import json # Importation of json

###############################################################################################################################################################################
# This program takes the files generated by the KOG_SigP.py program as inputs and write on them for each line KOG and SigP annotations of the queries
###############################################################################################################################################################################

# Recovery of the list containing the names of the files created by the KOG_SigP.py program
diamond_file = sys.argv[1]
# Path of each diamonds_KOG/SigP files
diamond_files = "/home/mbourema/mycocosm2024/mycocosm2024_purified/KOG_SigP_incase/" + str(diamond_file)

# Loading of the dictionnaries containing KOG and SigP annotations associated with the trasncriptIDs
with open("/home/mbourema/mycocosm2024/mycocosm2024_purified/dico.KOG_queries.json", "r") as f:
	d1 = json.load(f)

with open("/home/mbourema/mycocosm2024/mycocosm2024_purified/dico.SigP_queries.json", "r") as f:
	d2 = json.load(f)

# Adding KOG annotation of the query associated at her transcriptID
if "KOG" in diamond_file :
# Column number for all annotation types
	col1_nb = 5
	with open(diamond_files, "r") as f:
		lines = f.readlines() # Read all lines from the file
# Open the diamond file
	with open(diamond_files, "w") as f:
		for line in lines:
			line = line.rstrip()
			myquery = line.split('\t')[0]
			if myquery.startswith("jgi") :
				myID = myquery.split('|')
				myspecies = myID[1]
				mytranscriptID = myID[2]
				myline = ""
				mycolumn = [0] * col1_nb
				try:
					for i in range(0, col1_nb, 1):
						mycolumn[i] = str(d1[myspecies][mytranscriptID][i])
						if i < (col1_nb-1):
							myline += str(mycolumn[i])+"\t"
						elif i == (col1_nb-1):
							myline += str(mycolumn[i])+"\n"
							line = line + "\t" + myline
							f.write(line)
				except KeyError:
					for i in range(0, col1_nb, 1):
						if i < (col1_nb-1):
							myline += "Unknown\t"
						elif i == (col1_nb-1):
							myline += "Unknown\n"
							line = line + "\t" + myline
							f.write(line)
			else:
				myline = ""
				for i in range(0, col1_nb,1):
					if i < (col1_nb-1):
						myline += "NoHit\t"
					elif i == (col1_nb-1):
						myline += "NoHit\n"
						line = line + "\t" + myline
						f.write(line)

# Adding SigP annotation of the query associated at her transcriptID
else :
# Column number for all annotation types
	col1_nb = 5
	with open(diamond_files, "r") as f:
		lines = f.readlines() # Read all lines from the file
# Open the diamond file
	with open(diamond_files, "w") as f:
		for line in lines:
			line = line.rstrip()
			myquery = line.split('\t')[0]
			if myquery.startswith("jgi") :
				myID = myquery.split('|')
				myspecies = myID[1]
				mytranscriptID = myID[2]
				myline = ""
				mycolumn = [0] * col1_nb
				try:
					for i in range(0, col1_nb, 1):
						mycolumn[i] = str(d2[myspecies][mytranscriptID][i])
						if i < (col1_nb-1):
							myline += str(mycolumn[i])+"\t"
						elif i == (col1_nb-1):
							myline += str(mycolumn[i])+"\n"
							line = line + "\t" + myline
							f.write(line)
				except KeyError:
					for i in range(0, col1_nb, 1):
						if i < (col1_nb-1):
							myline += "Unknown\t"
						elif i == (col1_nb-1):
							myline += "Unknown\n"
							line = line + "\t" + myline
							f.write(line)
			else:
				myline = ""
				for i in range(0, col1_nb,1):
					if i < (col1_nb-1):
						myline += "NoHit\t"
					elif i == (col1_nb-1):
						myline += "NoHit\n"
						line = line + "\t" + myline
						f.write(line)
